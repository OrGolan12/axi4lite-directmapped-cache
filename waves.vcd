$date
	Fri Aug 15 15:32:33 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module core_translator_tb $end
$var wire 1 ! s_wready $end
$var wire 1 " s_rvalid $end
$var wire 2 # s_rresp [1:0] $end
$var wire 32 $ s_rdata [31:0] $end
$var wire 1 % s_bvalid $end
$var wire 2 & s_bresp [1:0] $end
$var wire 1 ' s_awready $end
$var wire 1 ( s_arready $end
$var wire 3 ) dbg_w_state [2:0] $end
$var wire 2 * dbg_r_state [1:0] $end
$var wire 4 + core_req_wstrb [3:0] $end
$var wire 1 , core_req_we $end
$var wire 32 - core_req_wdata [31:0] $end
$var wire 1 . core_req_valid $end
$var wire 32 / core_req_addr [31:0] $end
$var parameter 32 0 ADDR_WIDTH $end
$var parameter 32 1 DATA_WIDTH $end
$var reg 1 2 clk $end
$var reg 1 3 core_req_ready $end
$var reg 1 4 core_resp_is_write $end
$var reg 32 5 core_resp_rdata [31:0] $end
$var reg 2 6 core_resp_resp [1:0] $end
$var reg 1 7 core_resp_valid $end
$var reg 1 8 rst_n $end
$var reg 32 9 s_araddr [31:0] $end
$var reg 1 : s_arvalid $end
$var reg 32 ; s_awaddr [31:0] $end
$var reg 1 < s_awvalid $end
$var reg 1 = s_bready $end
$var reg 1 > s_rready $end
$var reg 32 ? s_wdata [31:0] $end
$var reg 4 @ s_wstrb [3:0] $end
$var reg 1 A s_wvalid $end
$var integer 32 B issue_stall_cnt [31:0] $end
$scope module dut $end
$var wire 1 C ar_hs $end
$var wire 1 D aw_hs $end
$var wire 1 E both_can $end
$var wire 1 F can_issue_r $end
$var wire 1 G can_issue_w $end
$var wire 1 2 clk $end
$var wire 1 H core_busy $end
$var wire 1 I core_hs_now $end
$var wire 1 3 core_req_ready $end
$var wire 1 . core_req_valid $end
$var wire 1 , core_req_we $end
$var wire 1 4 core_resp_is_write $end
$var wire 32 J core_resp_rdata [31:0] $end
$var wire 2 K core_resp_resp [1:0] $end
$var wire 1 7 core_resp_valid $end
$var wire 2 L dbg_r_state [1:0] $end
$var wire 3 M dbg_w_state [2:0] $end
$var wire 32 N r_addr_eff [31:0] $end
$var wire 1 8 rst_n $end
$var wire 32 O s_araddr [31:0] $end
$var wire 1 : s_arvalid $end
$var wire 32 P s_awaddr [31:0] $end
$var wire 1 ' s_awready $end
$var wire 1 < s_awvalid $end
$var wire 1 = s_bready $end
$var wire 2 Q s_bresp [1:0] $end
$var wire 1 % s_bvalid $end
$var wire 32 R s_rdata [31:0] $end
$var wire 1 > s_rready $end
$var wire 2 S s_rresp [1:0] $end
$var wire 1 " s_rvalid $end
$var wire 32 T s_wdata [31:0] $end
$var wire 1 ! s_wready $end
$var wire 4 U s_wstrb [3:0] $end
$var wire 1 A s_wvalid $end
$var wire 1 V same_addr_hazard $end
$var wire 1 W sel_r_now $end
$var wire 32 X w_addr_eff [31:0] $end
$var wire 1 Y w_hs $end
$var wire 1 Z write_addr_known $end
$var wire 4 [ w_strb_eff [3:0] $end
$var wire 32 \ w_data_eff [31:0] $end
$var wire 1 ] sel_w_now $end
$var wire 1 ( s_arready $end
$var wire 1 ^ read_addr_known $end
$var wire 4 _ core_req_wstrb [3:0] $end
$var wire 32 ` core_req_wdata [31:0] $end
$var wire 32 a core_req_addr [31:0] $end
$var parameter 32 b ADDR_WIDTH $end
$var parameter 32 c DATA_WIDTH $end
$var parameter 1 d WRITE_OVER_READ $end
$var reg 2 e b_hold_resp [1:0] $end
$var reg 1 f b_hold_valid $end
$var reg 32 g r_araddr_q [31:0] $end
$var reg 32 h r_hold_data [31:0] $end
$var reg 2 i r_hold_resp [1:0] $end
$var reg 1 j r_hold_valid $end
$var reg 2 k r_state [1:0] $end
$var reg 2 l r_state_n [1:0] $end
$var reg 32 m w_awaddr_q [31:0] $end
$var reg 3 n w_state [2:0] $end
$var reg 3 o w_state_n [2:0] $end
$var reg 32 p w_wdata_q [31:0] $end
$var reg 4 q w_wstrb_q [3:0] $end
$upscope $end
$scope task defaults $end
$upscope $end
$scope task pulse $end
$upscope $end
$upscope $end
$scope module core_translator_tb $end
$scope module dut $end
$upscope $end
$scope task defaults $end
$upscope $end
$scope task pulse $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
1d
b100000 c
b100000 b
b100000 1
b100000 0
$end
#0
$dumpvars
bx q
bx p
b0 o
bx n
bx m
b0 l
bx k
xj
bx i
bx h
bx g
xf
bx e
bx a
bx `
bx _
x^
x]
bx \
bx [
xZ
0Y
bx X
xW
xV
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
b0 K
bx J
xI
xH
xG
xF
xE
0D
0C
b0 B
0A
bx @
bx ?
0>
0=
0<
bx ;
0:
bx 9
08
07
b0 6
bx 5
04
13
02
bx /
x.
bx -
x,
bx +
bx *
bx )
x(
x'
bx &
x%
bx $
bx #
x"
x!
$end
#5000
0I
0.
0,
0]
0W
0E
0Z
0V
b0 +
b0 _
b0 -
b0 `
b0 /
b0 a
0F
0H
1'
1!
0G
b0 $
b0 R
b0 h
b0 #
b0 S
b0 i
0"
0j
b0 &
b0 Q
b0 e
0%
0f
b0 N
b0 g
b0 [
b0 q
b0 \
b0 p
b0 X
b0 m
1(
0^
b0 *
b0 L
b0 k
b0 )
b0 M
b0 n
12
#10000
02
#15000
12
#20000
02
#25000
12
#30000
02
#35000
12
#40000
02
#45000
18
12
#50000
02
#55000
12
#60000
02
#65000
12
#70000
02
#75000
12
#80000
02
#85000
12
#90000
02
#95000
b1 o
1D
1<
b0 ;
b0 P
12
#100000
02
#105000
1Z
0'
b1 )
b1 M
b1 n
b1 o
0D
0<
12
#110000
02
#115000
12
#120000
02
#125000
b1 l
1C
1:
b10000 9
b10000 O
12
#130000
02
#135000
1I
1.
1W
b10000 /
b10000 a
1F
b10000 N
b10000 g
0(
1^
b1 *
b1 L
b1 k
b10 l
0C
0:
12
#140000
02
#145000
0I
0.
0W
1H
0F
0^
b10 *
b10 L
b10 k
12
#150000
02
#155000
b11 o
1Y
1A
b1111 @
b1111 U
b11011110101011011011111011101111 ?
b11011110101011011011111011101111 T
12
#160000
02
#165000
0!
b1111 [
b1111 q
b11011110101011011011111011101111 \
b11011110101011011011111011101111 p
b11 )
b11 M
b11 n
b11 o
0Y
0A
12
#170000
02
#175000
b1 B
b10010001101000101011001111000 $
b10010001101000101011001111000 R
b10010001101000101011001111000 h
1"
1j
b0 l
17
b10010001101000101011001111000 5
b10010001101000101011001111000 J
12
#180000
02
#185000
b100 o
1I
b0 /
b0 a
b11011110101011011011111011101111 -
b11011110101011011011111011101111 `
b1111 +
b1111 _
1.
1,
1]
1G
0H
1(
b0 *
b0 L
b0 k
b10 B
b0 l
07
12
#190000
02
#195000
0I
b10000 /
b10000 a
b0 -
b0 `
b0 +
b0 _
0.
0,
0]
1H
0G
b11 B
b100 )
b100 M
b100 n
12
#200000
02
#205000
b0 B
12
#210000
02
#215000
1%
1f
b0 o
14
17
12
#220000
02
#225000
0H
1'
1!
0Z
b0 )
b0 M
b0 n
b0 o
07
12
#230000
02
#235000
12
